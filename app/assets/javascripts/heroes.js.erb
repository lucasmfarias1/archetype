const toggleRaceModal = () => {
  const raceModal = document.querySelector('.hero-form_race-modal');
  const style = window.getComputedStyle(raceModal);
  const display = style.getPropertyValue('display');
  if (display === 'none') {
    raceModal.style.display = 'flex';
  } else {
    raceModal.style.display = 'none';
  }
};

const setRace = (race) => {
  switch (race) {
    case 'human':
      state.race = 'human';
      break;
  
    case 'elf':
      state.race = 'elf';
      break;

    case 'orc':
      state.race = 'orc';
      break;

    default:
      break;
  }
  raceSelected = true;
  renderHero(state);
  toggleRaceModal();
};

const setDamage = (damage) => {
  switch (damage) {
    case 'magical':
      state.damage = 'magical';
      break;

    case 'physical':
      state.damage = 'physical';
      break;
  }
};

const setRange = (range) => {
  switch (range) {
    case 'melee':
      state.range = 'melee';
      break;

    case 'ranged':
      state.range = 'ranged';
      break;
  }
};

const setName = () => {
  const nameInput = document.getElementById('input-hero-name');
  state.name = nameInput.value;
  isHeroFormValid();
}

const deleteHero = (id) => {
  const deletedHero = document.querySelector('#hero-' + id);
  deletedHero.parentNode.removeChild(deletedHero);
}

const changeBase = (gender) => {
  switch (gender) {
    case 'male':
      state.gender = 'male';
      break;
    case 'female':
      state.gender = 'female';
      break;
  }
  renderHero(state);
}

const changeGear = (gear) => {
  switch (gear) {
    case 'heavy':
      state.gear = 'heavy';
      break;
    case 'medium':
      state.gear = 'medium';
      break;
    case 'light':
      state.gear = 'light';
      break;
  }
  renderHero(state);
}

const renderHero = (state) => {
  const heroBase = document.querySelector('.hero-form_preview_base');
  const heroGear = document.querySelector('.hero-form_preview_gear');

  switch (state.gender) {
    case 'male':
      switch (state.race) {
        case 'human':
          heroBase.src="<%= asset_data_uri 'hero/base/male-human.png' %>";
          break;
        
        case 'elf':
          heroBase.src="<%= asset_data_uri 'hero/base/male-elf.png' %>";
          break;

        case 'orc':
          heroBase.src="<%= asset_data_uri 'hero/base/male-orc.png' %>";
          break;
          
        default:
          break;
      }
      break;

    case 'female':
      switch (state.race) {
        case 'human':
          heroBase.src="<%= asset_data_uri 'hero/base/female-human.png' %>";
          break;
        
        case 'elf':
          heroBase.src="<%= asset_data_uri 'hero/base/female-elf.png' %>";
          break;

        case 'orc':
          heroBase.src="<%= asset_data_uri 'hero/base/female-orc.png' %>";
          break;
          
        default:
          break;
      }
      break;

    default:
      break;

  }

  switch (state.gear) {
    case 'heavy':
      if (state.gender === 'male') {
        heroGear.src="<%= asset_data_uri 'hero/gear/1/male.png' %>";
      } else {
        heroGear.src="<%= asset_data_uri 'hero/gear/1/female.png' %>";
      }
      break;
    case 'medium':
      if (state.gender === 'male') {
        heroGear.src="<%= asset_data_uri 'hero/gear/2/male.png' %>";
      } else {
        heroGear.src="<%= asset_data_uri 'hero/gear/2/female.png' %>";
      }
      break;
    case 'light':
      if (state.gender === 'male') {
        heroGear.src="<%= asset_data_uri 'hero/gear/3/male.png' %>";
      } else {
        heroGear.src="<%= asset_data_uri 'hero/gear/3/female.png' %>";
      }
      break;
  }

  const raceDisplay = document.querySelector('.hero-form_race-display');
  switch (state.race) {
    case 'human':
      raceDisplay.src="<%= asset_data_uri 'races/human.png' %>";
      break;

    case 'elf':
      raceDisplay.src="<%= asset_data_uri 'races/elf.png' %>";
      break;

    case 'orc':
      raceDisplay.src="<%= asset_data_uri 'races/orc.png' %>";
      break;
  }
  isHeroFormValid();
}

const isHeroFormValid = () => {
  const heroSubmitBtn = document.getElementById('hero-submit-button');

  if (state.name === '') {
    heroSubmitBtn.style.cursor = 'not-allowed';
    heroSubmitBtn.disabled = true;
    return false;
  }
  
  for (let property in state) {
    if (state[property] === null) {
      heroSubmitBtn.disabled = true;
      return false;
    }
  }

  heroSubmitBtn.disabled = false;
  heroSubmitBtn.style.cursor = 'pointer';
  return true;
}